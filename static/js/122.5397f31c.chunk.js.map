{"version":3,"file":"static/js/122.5397f31c.chunk.js","mappings":"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","sources":["webpack://main-project-1/./src/Components/Profile/Profile.module.css?f51d","webpack://main-project-1/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","Components/Profile/MyPosts/Posts/Posts.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","Components/Profile/HeadProfileBlock.tsx","Components/Profile/ProfileDataForm/ProfileDataForm.tsx","Components/Profile/ProfileDataForm/ProfileData.tsx","Components/Profile/Profile.tsx","selectors/selectors.ts","Components/Profile/ProfileContainer.tsx","hocs/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Profile_posts__l3TcI\",\"matchedBlock\":\"Profile_matchedBlock__TlOZJ\",\"changeProfilePhoto\":\"Profile_changeProfilePhoto__W5KDf\",\"profilePhoto\":\"Profile_profilePhoto__b3mcI\",\"profileInfo\":\"Profile_profileInfo__NKmvI\",\"status\":\"Profile_status__SC2Y9\",\"contacts\":\"Profile_contacts__Xbirj\",\"date\":\"Profile_date__QYIIz\"};","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__IQTM1\",\"elementsBlock\":\"MyPosts_elementsBlock__96k7A\",\"postsContainer\":\"MyPosts_postsContainer__1J3Aq\",\"postMessage\":\"MyPosts_postMessage__+D7Qe\",\"postLikes\":\"MyPosts_postLikes__hlToT\",\"sendButton\":\"MyPosts_sendButton__yPPcW\"};","import * as React from \"react\";\nimport s from \"../MyPosts.module.css\";\nimport likesIcon from \"../../../../pictures/likesicon.png\";\nimport profileAva from \"../../../../pictures/user.jpg\";\n\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\nconst Posts: React.FC<PropsType> = (props) => {\n    return (\n        <div className={s.posts}>\n            <img className={s.profilePhoto} alt=\"image\"\n                 src={profileAva}/>\n            <div className={s.postMessage}>{props.message}</div>\n            <div className={s.postLikes}>\n                Likes: {props.likesCount} <img src={likesIcon} alt=\"likes-icon\"/>\n            </div>\n        </div>\n    )\n}\nexport default Posts;\n","import * as React from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport Posts from \"./Posts/Posts\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requireField} from \"../../../validators/validator\";\nimport {createField, Textarea} from \"../../../validators/FormsControls\";\nimport {InitialType} from \"../../../redux/profileReducer\";\n\nexport type MapStatePropsType = {\n    profilePage: InitialType\n}\nexport type MapDispatchPropsType = {\n    addPostAC: (addPostMessage: string) => void\n}\nconst MyPosts: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n    let onSendMessage = (formData: AddPostMessageFormType) => {\n        const {addPostMessage} = formData\n        props.addPostAC(addPostMessage);\n    }\n\n\n    let state = props.profilePage;\n    const postsElements = state.posts.map(p => <Posts message={p.message} likesCount={p.likesCount}/>)\n\n    return (\n        <div>\n            <MyPostsReduxForm onSubmit={onSendMessage}/>\n            <div className={s.postsContainer}>\n                <h3>My posts</h3>\n                <div>\n                    {postsElements}\n                </div>\n            </div>\n        </div>\n    )\n}\n\ntype AddPostMessageFormType = {\n    addPostMessage: string\n}\ntype AddPostMessageFormKeysType = Extract<keyof AddPostMessageFormType, string>\ntype PropsType = {}\nconst maxLength5 = maxLengthCreator(5)\nconst MyPostsForm: React.FC<InjectedFormProps<AddPostMessageFormType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={s.elementsBlock}>\n                {\n                    createField<AddPostMessageFormKeysType>(50, 3,\"Type ur message\", \"addPostMessage\", [requireField, maxLength5], Textarea)}\n                <button className={s.sendButton}>Send message</button>\n            </div>\n        </form>\n\n    )\n}\n\nconst MyPostsReduxForm = reduxForm<AddPostMessageFormType>({form: \"addPostMessageForm\"})(MyPostsForm)\n\nexport default MyPosts;\n","import MyPosts, {MapDispatchPropsType, MapStatePropsType} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {actions} from \"../../../redux/profileReducer\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profilePage: state.profilePage\n});\nexport default connect<MapStatePropsType, MapDispatchPropsType, {},\n    AppStateType>(mapStateToProps, {addPostAC: actions.addPostAC})(MyPosts);\n","import * as React from \"react\";\r\nimport s from './../Profile.module.css';\r\nimport {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    statusText: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(\"\")\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.statusText)\r\n    }, [props.statusText]);\r\n    let toSetStatus = () => {\r\n        setEditMode(true)\r\n    }\r\n    let toSaveStatus = () => {\r\n        setEditMode(false)\r\n    }\r\n    props.updateUserStatus(status)\r\n\r\n    let statusChanging = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n                <div>\r\n                    status: <span onClick={toSetStatus}>{props.statusText || \"----\"}</span>\r\n                </div>}\r\n            {editMode &&\r\n                <div>\r\n                    <input onBlur={toSaveStatus} value={status} onChange={statusChanging}/>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import s from \"./Profile.module.css\";\nimport * as React from \"react\";\n\n\ntype PropsType = {\n    isOwner: boolean\n}\nconst HeadProfileBlock: React.FC<PropsType> = (props) => {\n    const date = new Date()\n    return <>\n        <div className={s.alwaysProfileBlock}>\n            <div className={s.date}>{date.toDateString()}</div>\n        </div>\n    </>\n\n}\nexport default HeadProfileBlock;","import * as React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport s from \"../Profile.module.css\";\r\nimport {createField, Input, Textarea} from \"../../../validators/FormsControls\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = Extract<keyof ProfileType, string>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <button>Save changes</button>\r\n            <div className={s.profileInfo}>\r\n                <div>\r\n                    my id is: {createField<ProfileTypeKeys>(0, 0, \"User id\", \"userId\", [], Input)}\r\n                    <div>\r\n                        about me: {createField<ProfileTypeKeys>(0, 0, \"About me\", \"aboutMe\", [], Textarea)}\r\n                        <div>\r\n                            looking for a job: {createField<ProfileTypeKeys>(0, 0, \"Looking for a job\",\r\n                            \"lookingForAJob\", [],\r\n                            Input, {type: \"checkbox\"})}\r\n                            <div>\r\n                                <div>\r\n                                    my programming skills: {createField<ProfileTypeKeys>(0, 0,\"My skills\",\r\n                                    \"lookingForAJobDescription\",\r\n                                    [], Textarea)}\r\n                                </div>\r\n                                <div>\r\n                                    my name is: {createField<ProfileTypeKeys>(0, 0,\"Name\", \"fullName\", [], Input)}\r\n                                </div>\r\n                                <div className={s.contacts}>\r\n                                    contacts: {Object.keys(props.profile.contacts).map(key => {\r\n                                    return <div key={key}>{key}: {createField(0, 0, key, \"contacts.\" + key, [], Input)}\r\n                                    </div>\r\n                                })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({\r\n    form: \"edit-profile\"\r\n})(ProfileDataForm)\r\n\r\n\r\nexport default ProfileDataReduxForm;","import * as React from \"react\";\r\nimport s from \"../Profile.module.css\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/profileReducer\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    toEditProfile: () => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n    return <>\r\n        <button onClick={props.toEditProfile}>Edit profile info</button>\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                my id is: {props.profile.userId}\r\n                <div>\r\n                    about me: {props.profile.aboutMe\r\n                    ? props.profile.aboutMe : \"I am the human!\"}\r\n                    <div>\r\n                        looking for a job: {props.profile.lookingForAJob ? \"yes\" :   \"no\"}\r\n                        <div>\r\n\r\n                            <div>\r\n                                my programming skills: {props.profile.lookingForAJobDescription\r\n                                ? props.profile.lookingForAJobDescription : \"----\"}\r\n                            </div>\r\n\r\n                            <div>\r\n                                my name is: {props.profile.fullName}\r\n                            </div>\r\n                            <div className={s.contacts}>\r\n                                contacts: {Object.keys(props.profile.contacts).map(key => {\r\n                                return <div key={key}>{key}: {props.profile.contacts[key as keyof ContactsType]\r\n                                    ? props.profile.contacts[key as keyof ContactsType] : \"https://somesite.com\"\r\n                                }</div>\r\n                            })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\nexport default ProfileData;","import * as React from \"react\";\nimport s from \"./Profile.module.css\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport LoadingBlock from \"../Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\nimport HeadProfileBlock from \"./HeadProfileBlock\";\nimport profileAva from \"../../pictures/user.jpg\"\nimport {ProfileType} from \"../../redux/profileReducer\";\nimport {useState} from \"react\";\nimport ProfileDataReduxForm from \"./ProfileDataForm/ProfileDataForm\";\nimport ProfileData from \"./ProfileDataForm/ProfileData\";\n\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    statusText: string\n    isOwner: boolean\n}\ntype MapDispatchPropsType = {\n    updateUserStatus: (status: string) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [profileImage, setProfileImage] = useState<null | string>(null)\n\n    const submittedData = (formData: ProfileType) => {\n        props.saveProfile(formData).then(() => {\n            setEditMode(prev => !prev)\n        })\n\n    }\n    if (!props.profile) {\n        return <LoadingBlock/>\n    }\n\n    return (\n        <div>\n            <HeadProfileBlock isOwner={props.isOwner}/>\n            <div className={s.matchedBlock}>\n                <div>\n                    <img className={s.profilePhoto} alt=\"profile photo\" src={profileImage || profileAva}/>\n                    {props.isOwner ? <input onChange={(e) => {\n                            if (e.target.files && e.target.files.length) {\n                                setProfileImage(URL.createObjectURL(e.target.files[0]));\n                            }\n                        }} type={\"file\"} className={s.changeProfilePhoto}/>\n                        : null}\n                    <ProfileStatusWithHooks updateUserStatus={props.updateUserStatus} statusText={props.statusText}/>\n                    <div>\n                <span>\n                 {!editMode ? <ProfileData profile={props.profile} toEditProfile={() => {\n                         setEditMode(prev => !prev)\n                     }} isOwner={props.isOwner}\n                     />\n                     : <ProfileDataReduxForm initialValues={props.profile} onSubmit={submittedData}\n                                             profile={props.profile}/>}\n                </span>\n                    </div>\n                </div>\n            </div>\n            <MyPostsContainer/>\n        </div>\n\n    )\n}\n\n\nexport default Profile;\n","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nconst getProfileSelector = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\nexport const getProfile = createSelector(getProfileSelector, (profile) => {\r\n    return profile;\r\n})\r\n\r\nconst getStatusTextSelector = (state: AppStateType) => {\r\n    return state.profilePage.statusText\r\n}\r\nexport const getStatusText = createSelector(getStatusTextSelector, (statusText) => {\r\n    return statusText;\r\n})","import * as React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getUserProfile,\n    getUserProfileStatus, ProfileType, saveProfile, updateUserStatus,\n} from \"../../redux/profileReducer\";\nimport {compose} from \"redux\";\nimport {getProfile, getStatusText} from \"../../selectors/selectors\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {withRouter, WithRouterProps} from \"../../hocs/withRouter\";\nimport {withAuthRedirect} from \"../../hocs/withAuthRedirect\";\n\n\ntype MapStatePropsType = {\n    statusText: string\n    authorizedUserId: number\n    profile: ProfileType\n}\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getUserProfileStatus: (userId: number) => void\n    updateUserStatus: (status: string) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & WithRouterProps;\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userId: number | null = +this.props.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.navigate(\"/login\")\n            }\n        }\n        if (!userId) {\n            console.error('Id should be exist')\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getUserProfileStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (prevProps.params.userId !== this.props.params.userId)\n            this.refreshProfile()\n    }\n\n    render() {\n        return <Profile profile={this.props.profile}\n                        updateUserStatus={this.props.updateUserStatus}\n                        statusText={this.props.statusText}\n                        isOwner={!this.props.params.userId}\n                        saveProfile={this.props.saveProfile}\n        />\n    }\n\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profile: getProfile(state),\n    statusText: getStatusText(state),\n    authorizedUserId: state.auth.userId,\n})\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    withAuthRedirect,\n    connect(mapStateToProps, {\n        getUserProfile,\n        getUserProfileStatus, saveProfile, updateUserStatus\n    }))(ProfileContainer)\n","import {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {}\r\n\r\nconst mapState = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport function withAuthRedirect <WCP>(Component: React.ComponentType<WCP>) {\r\n    const AuthRedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={\"/login\"}/>\r\n\r\n        return <Component {...restProps as WCP & MapDispatchPropsType & MapStatePropsType} />\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(\r\n        mapState, {})(AuthRedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n"],"names":["props","_jsxs","className","s","posts","children","_jsx","profilePhoto","alt","src","profileAva","postMessage","message","postLikes","likesCount","likesIcon","maxLength5","maxLengthCreator","MyPostsReduxForm","reduxForm","form","onSubmit","handleSubmit","elementsBlock","createField","requireField","Textarea","sendButton","postsElements","profilePage","map","p","Posts","formData","addPostMessage","addPostAC","postsContainer","connect","state","actions","MyPosts","editMode","setEditMode","useState","status","setStatus","useEffect","statusText","updateUserStatus","onClick","toSetStatus","onBlur","toSaveStatus","value","onChange","e","currentTarget","date","Date","_Fragment","alwaysProfileBlock","toDateString","profileInfo","Input","type","contacts","Object","keys","profile","key","toEditProfile","userId","aboutMe","lookingForAJob","lookingForAJobDescription","fullName","profileImage","setProfileImage","HeadProfileBlock","isOwner","matchedBlock","target","files","length","URL","createObjectURL","changeProfilePhoto","ProfileStatusWithHooks","ProfileDataReduxForm","initialValues","saveProfile","then","prev","ProfileData","MyPostsContainer","LoadingBlock","getProfile","createSelector","getStatusText","ProfileContainer","React","refreshProfile","this","params","authorizedUserId","navigate","getUserProfile","getUserProfileStatus","console","error","componentDidMount","componentDidUpdate","prevProps","prevState","render","Profile","compose","withRouter","withAuthRedirect","auth","mapState","isAuth","Component","restProps","Navigate","to"],"sourceRoot":""}