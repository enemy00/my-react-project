{"version":3,"file":"static/js/122.25fb7198.chunk.js","mappings":"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","sources":["webpack://main-project-1/./src/Components/Profile/Profile.module.css?f51d","webpack://main-project-1/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","Components/Profile/MyPosts/Posts/Posts.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","Components/Profile/HeadProfileBlock.tsx","Components/Profile/ProfileDataForm/ProfileDataForm.tsx","Components/Profile/ProfileDataForm/ProfileData.tsx","Components/Profile/Profile.tsx","selectors/selectors.ts","Components/Profile/ProfileContainer.tsx","hocs/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"alwaysProfileBlock\":\"Profile_alwaysProfileBlock__bbfgn\",\"posts\":\"Profile_posts__l3TcI\",\"matchedBlock\":\"Profile_matchedBlock__TlOZJ\",\"profilePhoto\":\"Profile_profilePhoto__b3mcI\",\"profileInfo\":\"Profile_profileInfo__NKmvI\",\"status\":\"Profile_status__SC2Y9\",\"contacts\":\"Profile_contacts__Xbirj\",\"date\":\"Profile_date__QYIIz\"};","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__IQTM1\",\"elementsBlock\":\"MyPosts_elementsBlock__96k7A\"};","import * as React from \"react\";\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\nconst Posts: React.FC<PropsType> = (props) => {\n    return (\n        <div>\n            <img alt=\"image\"\n                 src=\"https://gas-kvas.com/uploads/posts/2023-02/1675343501_gas-kvas-com-p-art-risunki-dlya-yutuba-28.jpg\"/>\n            {props.message}\n            <div>\n                likes: {props.likesCount}\n            </div>\n        </div>\n    )\n}\nexport default Posts;\n","import * as React from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport Posts from \"./Posts/Posts\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requireField} from \"../../../validators/validator\";\nimport {createField, Textarea} from \"../../../validators/FormsControls\";\nimport {InitialType} from \"../../../redux/profileReducer\";\n\nexport type MapStatePropsType = {\n    profilePage: InitialType\n}\nexport type MapDispatchPropsType = {\n    addPostAC: (addPostMessage: string) => void\n}\nconst MyPosts: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n    let onSendMessage = (formData: AddPostMessageFormType) => {\n        const {addPostMessage} = formData\n        props.addPostAC(addPostMessage);\n    }\n\n\n    let state = props.profilePage;\n    const postsElements = state.posts.map(p => <Posts message={p.message} likesCount={p.likesCount}/>)\n\n    return (\n        <div>\n            <MyPostsReduxForm onSubmit={onSendMessage}/>\n            <div className={s.posts}>\n                my posts\n                <div>\n                    {postsElements}\n                </div>\n            </div>\n        </div>\n    )\n}\n\ntype AddPostMessageFormType = {\n    addPostMessage: string\n}\ntype AddPostMessageFormKeysType = Extract<keyof AddPostMessageFormType, string>\ntype PropsType = {}\nconst maxLength5 = maxLengthCreator(5)\nconst MyPostsForm: React.FC<InjectedFormProps<AddPostMessageFormType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={s.elementsBlock}>\n                {\n                    createField<AddPostMessageFormKeysType>(0, 0,\"Type ur message\", \"addPostMessage\", [requireField, maxLength5], Textarea)}\n                <button>Send message</button>\n            </div>\n        </form>\n\n    )\n}\n\nconst MyPostsReduxForm = reduxForm<AddPostMessageFormType>({form: \"addPostMessageForm\"})(MyPostsForm)\n\nexport default MyPosts;\n","import MyPosts, {MapDispatchPropsType, MapStatePropsType} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {actions} from \"../../../redux/profileReducer\";\nimport {AppStateType} from \"../../../redux/redux-store\";\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profilePage: state.profilePage\n});\nexport default connect<MapStatePropsType, MapDispatchPropsType, {},\n    AppStateType>(mapStateToProps, {addPostAC: actions.addPostAC})(MyPosts);\n","import * as React from \"react\";\r\nimport s from './../Profile.module.css';\r\nimport {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    statusText: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(\"\")\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.statusText)\r\n    }, [props.statusText]);\r\n    let toSetStatus = () => {\r\n        setEditMode(true)\r\n    }\r\n    let toSaveStatus = () => {\r\n        setEditMode(false)\r\n    }\r\n    props.updateUserStatus(status)\r\n\r\n    let statusChanging = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n                <div>\r\n                    status: <span onClick={toSetStatus}>{props.statusText || \"----\"}</span>\r\n                </div>}\r\n            {editMode &&\r\n                <div>\r\n                    <input onBlur={toSaveStatus} value={status} onChange={statusChanging}/>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import s from \"./Profile.module.css\";\nimport * as React from \"react\";\n\n\ntype PropsType = {\n    isOwner: boolean\n}\nconst HeadProfileBlock: React.FC<PropsType> = (props) => {\n    const date = new Date()\n\n    const onSizeChange = () => {\n        let size = (document.getElementById(\"size\") as HTMLInputElement).value\n        let image = (document.getElementById(\"pic\") as HTMLInputElement)\n        image.width = 1 + 20 * +size\n\n    }\n    return <>\n        <div className={s.alwaysProfileBlock}>\n            <img alt=\"image is here\"\n                 id=\"pic\" src=\"https://images.hdqwalls.com/download/sunset-tree-red-ocean-sky-7w-2880x1800.jpg\"/>\n            <div>{props.isOwner ? <input defaultValue={20} onChange={onSizeChange} type={\"range\"} min={1} max={40} id=\"size\"/>\n                : null}</div>\n            <div className={s.date}>{date.toDateString()}</div>\n        </div>\n    </>\n\n}\nexport default HeadProfileBlock;","import * as React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport s from \"../Profile.module.css\";\r\nimport {createField, Input, Textarea} from \"../../../validators/FormsControls\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = Extract<keyof ProfileType, string>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <button>Save changes</button>\r\n            <div className={s.profileInfo}>\r\n                <div>\r\n                    my id is: {createField<ProfileTypeKeys>(0, 0, \"User id\", \"userId\", [], Input)}\r\n                    <div>\r\n                        about me: {createField<ProfileTypeKeys>(0, 0, \"About me\", \"aboutMe\", [], Textarea)}\r\n                        <div>\r\n                            looking for a job: {createField<ProfileTypeKeys>(0, 0, \"Looking for a job\",\r\n                            \"lookingForAJob\", [],\r\n                            Input, {type: \"checkbox\"})}\r\n                            <div>\r\n                                <div>\r\n                                    my programming skills: {createField<ProfileTypeKeys>(0, 0,\"My skills\",\r\n                                    \"lookingForAJobDescription\",\r\n                                    [], Textarea)}\r\n                                </div>\r\n                                <div>\r\n                                    my name is: {createField<ProfileTypeKeys>(0, 0,\"Name\", \"fullName\", [], Input)}\r\n                                </div>\r\n                                <div className={s.contacts}>\r\n                                    contacts: {Object.keys(props.profile.contacts).map(key => {\r\n                                    return <div key={key}>{key}: {createField(0, 0, key, \"contacts.\" + key, [], Input)}\r\n                                    </div>\r\n                                })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({\r\n    form: \"edit-profile\"\r\n})(ProfileDataForm)\r\n\r\n\r\nexport default ProfileDataReduxForm;","import * as React from \"react\";\r\nimport s from \"../Profile.module.css\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/profileReducer\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    toEditProfile: () => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n    return <>\r\n        <button onClick={props.toEditProfile}>Edit profile info</button>\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                my id is: {props.profile.userId}\r\n                <div>\r\n                    about me: {props.profile.aboutMe\r\n                    ? props.profile.aboutMe : \"I am the human!\"}\r\n                    <div>\r\n                        looking for a job: {props.profile.lookingForAJob ? \"yes\" :   \"no\"}\r\n                        <div>\r\n\r\n                            <div>\r\n                                my programming skills: {props.profile.lookingForAJobDescription\r\n                                ? props.profile.lookingForAJobDescription : \"----\"}\r\n                            </div>\r\n\r\n                            <div>\r\n                                my name is: {props.profile.fullName}\r\n                            </div>\r\n                            <div className={s.contacts}>\r\n                                contacts: {Object.keys(props.profile.contacts).map(key => {\r\n                                return <div key={key}>{key}: {props.profile.contacts[key as keyof ContactsType]\r\n                                    ? props.profile.contacts[key as keyof ContactsType] : \"https://somesite.com\"\r\n                                }</div>\r\n                            })}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\nexport default ProfileData;","import * as React from \"react\";\nimport s from \"./Profile.module.css\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport LoadingBlock from \"../Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\nimport HeadProfileBlock from \"./HeadProfileBlock\";\nimport profileAva from \"../../pictures/user.jpg\"\nimport {ProfileType} from \"../../redux/profileReducer\";\nimport {ChangeEvent, useState} from \"react\";\nimport ProfileDataReduxForm from \"./ProfileDataForm/ProfileDataForm\";\nimport ProfileData from \"./ProfileDataForm/ProfileData\";\n\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    statusText: string\n    isOwner: boolean\n    photo: File\n}\ntype MapDispatchPropsType = {\n    updateUserStatus: (status: string) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n    getPhoto: (photo: File) => void\n}\n\nconst Profile: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n\n    const [editMode, setEditMode] = useState(false)\n\n\n    const onPhotoChange = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            props.getPhoto(e.target.files[0])\n        }\n    }\n\n    const submittedData = (formData: ProfileType) => {\n        props.saveProfile(formData).then(() => {\n            setEditMode(prev => !prev)\n        })\n\n    }\n    if (!props.profile) {\n        return <LoadingBlock/>\n    }\n\n\n    return (\n        <div>\n            <HeadProfileBlock isOwner={props.isOwner}/>\n            <div className={s.matchedBlock}>\n                <div>\n                    <img alt=\"profile photo\" src={profileAva}/>\n                    {props.isOwner ? <input onChange={onPhotoChange} type={\"file\"} className={s.profilePhoto}/>\n                        : null}\n                    <ProfileStatusWithHooks updateUserStatus={props.updateUserStatus} statusText={props.statusText}/>\n                    <div>\n                <span>\n                 {!editMode ? <ProfileData profile={props.profile} toEditProfile={() => {\n                         setEditMode(prev => !prev)\n                     }} isOwner={props.isOwner}\n                     />\n                     : <ProfileDataReduxForm initialValues={props.profile} onSubmit={submittedData}\n                                             profile={props.profile}/>}\n                </span>\n                    </div>\n                </div>\n            </div>\n            <MyPostsContainer/>\n        </div>\n\n    )\n}\n\n\nexport default Profile;\n","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nconst getProfileSelector = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\nexport const getProfile = createSelector(getProfileSelector, (profile) => {\r\n    return profile;\r\n})\r\n\r\nconst getStatusTextSelector = (state: AppStateType) => {\r\n    return state.profilePage.statusText\r\n}\r\nexport const getStatusText = createSelector(getStatusTextSelector, (statusText) => {\r\n    return statusText;\r\n})","import * as React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    actions,\n    getPhoto,\n    getUserProfile,\n    getUserProfileStatus, ProfileType, saveProfile, updateUserStatus,\n} from \"../../redux/profileReducer\";\nimport {compose} from \"redux\";\nimport {getProfile, getStatusText} from \"../../selectors/selectors\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {withRouter, WithRouterProps} from \"../../hocs/withRouter\";\nimport {withAuthRedirect} from \"../../hocs/withAuthRedirect\";\n\n\ntype MapStatePropsType = {\n    statusText: string\n    authorizedUserId: number\n    profile: ProfileType\n    photo: File\n\n}\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getUserProfileStatus: (userId: number) => void\n    updateUserStatus: (status: string) => void\n    getPhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & WithRouterProps;\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userId: number | null = +this.props.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.navigate(\"/login\")\n            }\n        }\n        if (!userId) {\n            console.error('Id should be exist')\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getUserProfileStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: PropsType , prevState: PropsType) {\n        if (prevProps.params.userId !== this.props.params.userId)\n            this.refreshProfile()\n    }\n\n    render() {\n        return <Profile profile={this.props.profile}\n                        updateUserStatus={this.props.updateUserStatus}\n                        statusText={this.props.statusText}\n                        isOwner={!this.props.params.userId}\n                        getPhoto={this.props.getPhoto}\n                        saveProfile={this.props.saveProfile}\n                        photo={this.props.photo}\n\n        />\n    }\n\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    profile: getProfile(state),\n    statusText: getStatusText(state),\n    authorizedUserId: state.auth.userId,\n    photo: state.profilePage.photo,\n\n})\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    withAuthRedirect,\n    connect(mapStateToProps, {\n        getUserProfile,\n        getUserProfileStatus, actions, getPhoto, saveProfile, updateUserStatus\n    }))(ProfileContainer)\n","import {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {}\r\n\r\nconst mapState = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport function withAuthRedirect <WCP>(Component: React.ComponentType<WCP>) {\r\n    const AuthRedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={\"/login\"}/>\r\n\r\n        return <Component {...restProps as WCP & MapDispatchPropsType & MapStatePropsType} />\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(\r\n        mapState, {})(AuthRedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n"],"names":["props","_jsxs","children","_jsx","alt","src","message","likesCount","maxLength5","maxLengthCreator","MyPostsReduxForm","reduxForm","form","onSubmit","handleSubmit","className","s","createField","requireField","Textarea","postsElements","profilePage","posts","map","p","Posts","formData","addPostMessage","addPostAC","connect","state","actions","MyPosts","editMode","setEditMode","useState","status","setStatus","useEffect","statusText","updateUserStatus","onClick","toSetStatus","onBlur","toSaveStatus","value","onChange","e","currentTarget","date","Date","_Fragment","id","isOwner","defaultValue","onSizeChange","size","document","getElementById","width","type","min","max","toDateString","Input","Object","keys","profile","contacts","key","toEditProfile","userId","aboutMe","lookingForAJob","lookingForAJobDescription","fullName","HeadProfileBlock","profileAva","target","files","length","getPhoto","ProfileStatusWithHooks","ProfileDataReduxForm","initialValues","saveProfile","then","prev","ProfileData","MyPostsContainer","LoadingBlock","getProfile","createSelector","getStatusText","ProfileContainer","React","refreshProfile","this","params","authorizedUserId","navigate","getUserProfile","getUserProfileStatus","console","error","componentDidMount","componentDidUpdate","prevProps","prevState","render","Profile","photo","compose","withRouter","withAuthRedirect","auth","mapState","isAuth","Component","restProps","Navigate","to"],"sourceRoot":""}