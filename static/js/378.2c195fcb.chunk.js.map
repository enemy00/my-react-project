{"version":3,"file":"static/js/378.2c195fcb.chunk.js","mappings":"kMAeA,MAiCA,EAjCqEA,KACjEC,EAAAA,EAAAA,YAAU,KACND,EAAME,UAAU,GACjB,IAEEF,EAAMG,OAIPC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,EAAEC,cAAcJ,SAAC,mBAChCF,EAAAA,EAAAA,MAAA,OAAKI,UAAWC,EAAAA,EAAEE,QAAQL,SAAA,EACtBF,EAAAA,EAAAA,MAAA,OAAKI,UAAWC,EAAAA,EAAEG,aAAaN,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EAAMC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wCAAuC,OAC/CN,EAAMG,MAAMU,KAAIC,IACNP,EAAAA,EAAAA,KAAA,OAAAD,UACHC,EAAAA,EAAAA,KAACQ,EAAAA,GAAO,CAACC,GAAE,kBAAAC,OAAoBH,EAAEI,IAAKZ,UAC1CC,EAAAA,EAAAA,KAAA,QAAAD,SACIQ,EAAEK,iBAMdZ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAEW,SAASd,UACvBC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,EAAEY,aAAaf,SAAC,kCAnBrCC,EAAAA,EAAAA,KAACe,EAAAA,EAAY,K,4CCR5B,SAAeC,EAAAA,EAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAPmBC,IAAmB,CACtCC,YAAaD,EAAMC,YACnBxB,MAAOuB,EAAME,UAAUzB,SAKE,CAACD,SAAQ,OAFtC,CAE0C2B,E,6ECL1C,MAAMC,EAAYJ,IAAmB,CACjCK,OAAQL,EAAMM,KAAKD,SAEhB,SAASP,EAAuBS,GASnC,OAFqCR,EAAAA,EAAAA,IACjCK,EAAU,CAAC,EADsBL,EAN8CzB,IAC/E,IAAI,OAAC+B,KAAWG,GAAalC,EAC7B,OAAK+B,GAEExB,EAAAA,EAAAA,KAAC0B,EAAS,IAAKC,KAFF3B,EAAAA,EAAAA,KAAC4B,EAAAA,GAAQ,CAACnB,GAAI,UAEmD,GAK7F,C","sources":["Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","hocs/withAuthRedirect.tsx"],"sourcesContent":["import * as React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport LoadingBlock from \"../Preloader/Preloader\";\nimport {InitialType} from \"../../redux/dialogsReducer\";\nimport {UserType} from \"../../redux/resourcesReducer\";\nimport {useEffect} from \"react\";\n\ntype MapStatePropsType = {\n    dialogsPage: InitialType\n    users: Array<UserType>\n}\ntype MapDispatchPropsType = {\n    getUsers: () => void\n}\nconst Dialogs: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\n    useEffect(() => {\n        props.getUsers()\n    }, []);\n\n    if (!props.users) {\n        return <LoadingBlock/>\n    }\n    return (\n        <>\n            <h2 className={s.headContainer}>PhAPI dialogs</h2>\n            <div className={s.dialogs}>\n                <div className={s.dialogsItems}>\n                    <span><b>Choose the person to start a dialog</b>:</span>\n                    {props.users.map(u => {\n                        return <div>\n                            <NavLink to={`/dialogs/convo/${u.id}`}>\n                        <span>\n                           {u.name}\n                        </span>\n                            </NavLink>\n                        </div>\n                    })}\n                </div>\n                <div className={s.messages}>\n                    <div className={s.textPosition}>\n                        Start ur dialog now!\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default Dialogs;","import Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {getUsers} from \"../../redux/resourcesReducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport * as React from \"react\";\nimport {withAuthRedirect} from \"../../hocs/withAuthRedirect\";\n\nlet mapStateToProps = (state: AppStateType) => ({\n    dialogsPage: state.dialogsPage,\n    users: state.resources.users\n});\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, {getUsers}))(Dialogs);\n","import {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {}\r\n\r\nconst mapState = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport function withAuthRedirect <WCP>(Component: React.ComponentType<WCP>) {\r\n    const AuthRedirectComponent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={\"/login\"}/>\r\n\r\n        return <Component {...restProps as WCP & MapDispatchPropsType & MapStatePropsType} />\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapStatePropsType, MapDispatchPropsType, WCP, AppStateType>(\r\n        mapState, {})(AuthRedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n"],"names":["props","useEffect","getUsers","users","_jsxs","_Fragment","children","_jsx","className","s","headContainer","dialogs","dialogsItems","map","u","NavLink","to","concat","id","name","messages","textPosition","LoadingBlock","compose","withAuthRedirect","connect","state","dialogsPage","resources","Dialogs","mapState","isAuth","auth","Component","restProps","Navigate"],"sourceRoot":""}